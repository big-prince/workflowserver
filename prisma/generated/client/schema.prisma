generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id        String   @id @default(cuid())
  fullName  String?
  email     String?  @unique
  password  String?
  username  String?  @unique
  githubId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  projectsOwned Project[] @relation("ProjectOwner") // Projects created by this user
  projects      Project[] @relation("ProjectMembers") // Projects where this user is a member
  tokens        Token[]
  Task          Task[]
}

// OTP Model
model Otp {
  id        String   @id @default(cuid())
  email     String?  @unique
  otp       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Token Model
model Token {
  id        String    @id @default(cuid())
  userId    String?
  token     String?   @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  updatedAt DateTime  @updatedAt

  // Relationships
  user User? @relation(fields: [userId], references: [id])
}

// Project Model
model Project {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  type        String?   @default("Personal")
  githubUrl   String?   @unique
  deadline    DateTime?
  startDate   DateTime?
  privacy     String?   @default("Public")
  status      String?   @default("Active")
  color       String?

  // Relationships
  creatorId String
  creator   User   @relation("ProjectOwner", fields: [creatorId], references: [id]) // Owner of the project
  members   User[] @relation("ProjectMembers")

  tasks Task[]
}

// Task Model
model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("todo")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  projectId    String
  project      Project @relation(fields: [projectId], references: [id])
  assignedTo   User?   @relation(fields: [assignedToId], references: [id])
  assignedToId String?
}
